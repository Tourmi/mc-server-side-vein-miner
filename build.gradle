plugins {
    id 'idea'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
}

version = "${minecraft_version}-${mod_version}"
group = mod_group

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(${{java_version}})

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'official', version: minecraft_version

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', mod_id

            mods {
                runClient {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', mod_id

            mods {
                runServer {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                runData {
                    source sourceSets.main
                }
            }
        }
    }
}

processResources {
    inputs.property "version", version
    
    def properties = [
        mod_id:mod_id,
        version:version,
        mod_version:mod_version,
        mod_group:mod_group,
        mod_name:mod_name,
        mod_description:mod_description,
        mod_credits:mod_credits,
        mod_issue_tracker:mod_issue_tracker,
        mod_url:mod_url,
        mod_license:mod_license,
        
        author_name:author_name,
        author_domain:author_domain,
        
        minecraft_version:minecraft_version,
        minecraft_min_version:minecraft_min_version,
        minecraft_max_version:minecraft_max_version,
        
        forge_version:forge_version,
        forge_min_version:forge_min_version,
        forge_max_version:forge_max_version,
        forge_update_json_url:forge_update_json_url,
        forge_displaytest_value:forge_displaytest_value,
        forge_minecraft_side:forge_minecraft_side
    ]
    
    from(sourceSets.main.resources.srcDirs) {
        duplicatesStrategy 'include'
        include 'META-INF/mods.toml'
        expand properties
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : mod_name,
                "Specification-Vendor"    : author_name,
                "Specification-Version"   : mod_version,
                "Implementation-Title"    : mod_name,
                "Implementation-Vendor"   : author_name,
                "Implementation-Version"  : mod_version,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
