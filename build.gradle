plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0.24,6.2)'
}

version = "${minecraft_version}-${mod_version}"
group = mod_group

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(java_version)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'official', version: minecraft_version
    if (disable_reobf.toBoolean()) {
      reobf = false
    }
    copyIdeResources = true
    enableEclipsePrepareRuns = true
    enableIdeaPrepareRuns = true
    runs {
        configureEach {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'
        }

        client {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            workingDirectory project.file('run-data')

            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}


dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    implementation('net.sf.jopt-simple:jopt-simple:5.0.4') { version { strictly '5.0.4' } }
}

processResources {
    def properties = [
            mod_id:mod_id,
            version:version,
            mod_version:mod_version,
            mod_group:mod_group,
            mod_name:mod_name,
            mod_description:mod_description,
            mod_credits:mod_credits,
            mod_issue_tracker:mod_issue_tracker,
            mod_url:mod_url,
            mod_license:mod_license,

            author_name:author_name,
            author_domain:author_domain,

            minecraft_version:minecraft_version,
            minecraft_min_version:minecraft_min_version,
            minecraft_max_version:minecraft_max_version,

            forge_version:forge_version,
            forge_min_version:forge_min_version,
            forge_max_version:forge_max_version,
            forge_update_json_url:forge_update_json_url,
            forge_displaytest_value:forge_displaytest_value,
            forge_minecraft_side:forge_minecraft_side
    ]

    inputs.properties properties

    from(sourceSets.main.resources.srcDirs) {
        duplicatesStrategy 'include'
        include 'META-INF/mods.toml'
        expand properties
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : mod_name,
                "Specification-Vendor"    : author_name,
                "Specification-Version"   : mod_version,
                "Implementation-Title"    : mod_name,
                "Implementation-Vendor"   : author_name,
                "Implementation-Version"  : mod_version,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

sourceSets.each {
    def dir = layout.buildDirectory.dir("sourcesSets/$it.name")
    it.output.resourcesDir = dir
    it.java.destinationDirectory = dir
}